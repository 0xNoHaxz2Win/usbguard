header {
}

start = RULE;

mode RULE :
     <entry: DQ_STRING_READER>
     <exit: DQ_STRING_READER>
{
	<<EOF>> => RULE_TOKEN_TERMINATION;

	[ \t\r\n]+ { }

	"*" => RULE_TOKEN_ASTERISK;
	"{" => RULE_TOKEN_CURLYBRACE_OPEN;
	"}" => RULE_TOKEN_CURLYBRACE_CLOSE;
	":" => RULE_TOKEN_COLON;
	[0-9a-fA-F]{4} => RULE_TOKEN_HEXCHAR4(Lexeme);
	"allow" => RULE_TOKEN_KEYWORD_ALLOW;
	"block" => RULE_TOKEN_KEYWORD_BLOCK;
	"reject" => RULE_TOKEN_KEYWORD_REJECT;
	"name" => RULE_TOKEN_KEYWORD_NAME;
	"action" => RULE_TOKEN_KEYWORD_ACTION;
	"hash" => RULE_TOKEN_KEYWORD_HASH;
	"port" => RULE_TOKEN_KEYWORD_PORT;

	"\"" {
	     self_send(RULE_TOKEN_DQ_STRING_BEGIN);
	     self << DQ_STRING_READER;
	     RETURN;
	}
}

mode DQ_STRING_READER :
     <entry: RULE>
     <exit: RULE>
{
	on_entry { self_accumulator_clear(); }
	on_exit {
		self_accumulator_flush(RULE_TOKEN_DQ_STRING);
		self_send(RULE_TOKEN_DQ_STRING_END);
	}

	// Escaped double quote
	"\\\"" { self_accumulator_add(Lexeme, LexemeEnd); }

	// Escaped escape character
	"\\\\" { self_accumulator_add(Lexeme, LexemeEnd); }

	"\"" {
	     self << RULE;
	     RETURN;
	}

	. { self_accumulator_add(Lexeme, LexemeEnd); }

	<<FAIL>> {
		 self_accumulator_add(Lexeme, LexemeEnd);
	}
}
