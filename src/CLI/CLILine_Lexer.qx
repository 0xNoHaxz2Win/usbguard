header {
//
// Copyright (C) 2015 Red Hat, Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// Authors: Daniel Kopecek <dkopecek@redhat.com>
//
}

start = CLI;

mode CLI :
     <entry: DQ_STRING_READER>
     <exit: DQ_STRING_READER>
{
	<<EOF>> => CLI_TOKEN_TERMINATION;

	[ \t\r\n]+ { }

	"rule" => CLI_TOKEN_KEYWORD_RULE;
	"device" => CLI_TOKEN_KEYWORD_DEVICE;
	"append" => CLI_TOKEN_KEYWORD_APPEND;
	"remove" => CLI_TOKEN_KEYWORD_REMOVE;
	"list" => CLI_TOKEN_KEYWORD_LIST;
	"hash" => CLI_TOKEN_KEYWORD_HASH;
	"set-policy" => CLI_TOKEN_KEYWORD_SET_POLICY;
	"last" => CLI_TOKEN_KEYWORD_LAST;
	"root" => CLI_TOKEN_KEYWORD_ROOT;
	"true" => CLI_TOKEN_KEYWORD_TRUE;
	"false" => CLI_TOKEN_KEYWORD_FALSE;

	"--parent" => CLI_TOKEN_OPTION_PARENT;
	"--timeout" => CLI_TOKEN_OPTION_TIMEOUT;
	"--permanent" => CLI_TOKEN_OPTION_PERMANENT;

	[1-9][0-9]* => CLI_TOKEN_NUMBER_UNSIGNED_INTEGER(Lexeme, LexemeEnd);
	[1-9][0-9]*"h" => CLI_TOKEN_NUMBER_HOURS(Lexeme, LexemeEnd - 1);
	[1-9][0-9]*"m" => CLI_TOKEN_NUMBER_MINUTES(Lexeme, LexemeEnd - 1);
	[1-9][0-9]*"d" => CLI_TOKEN_NUMBER_DAYS(Lexeme, LexemeEnd - 1);

	"\"" {
	     self_send(CLI_TOKEN_DQ_STRING_BEGIN);
	     self << DQ_STRING_READER;
	     RETURN;
	}
}

mode DQ_STRING_READER :
     <entry: CLI>
     <exit: CLI>
{
	on_entry { self_accumulator_clear(); }
	on_exit {
		self_accumulator_flush(CLI_TOKEN_STRING);
		self_send(CLI_TOKEN_DQ_STRING_END);
	}

	// Escaped double quote
	"\\\"" { self_accumulator_add(Lexeme, LexemeEnd); }

	// Escaped escape character
	"\\\\" { self_accumulator_add(Lexeme, LexemeEnd); }

	"\"" {
	     self << CLI;
	     RETURN;
	}

	. { self_accumulator_add(Lexeme, LexemeEnd); }

	<<FAIL>> {
		 self_accumulator_add(Lexeme, LexemeEnd);
	}
}
