.TH "USBGUARD\-RULES.CONF" "5" "June 2016" "" ""
.SH NAME
.PP
\f[B]usbguard\-rules.conf\f[] \-\- USBGuard rule set file
.SH DESCRIPTION
.PP
The \f[B]usbguard\-rules.conf\f[] file is loaded by the USBGuard daemon
after it parses the main configuration file,
\f[B]usbguard\-daemon.conf\f[](5).
The daemon expects the file to contain rules written in a rule language
which is described in the \f[I]Rule Language\f[] section bellow.
.SH Rule Language
.PP
The USBGuard daemon decides which USB device to authorize based on a
policy defined by a set of rules.
When an USB device is inserted into the system, the daemon scans the
existing rules sequentially and when a matching rule is found, it either
authorizes (\f[B]allows\f[]), deauthorizes (\f[B]blocks\f[]) or removes
(\f[B]rejects\f[]) the device, based on the rule target.
If no matching rule is found, the decision is based on an implicit
default target.
This implicit default is to block the device until a decision is made by
the user.
The rule language grammar, expressed in a BNF\-like syntax, is the
following:
.IP
.nf
\f[C]
\ \ \ \ rule\ ::=\ target\ device_id\ device_attributes\ conditions.

\ \ \ \ target\ ::=\ "allow"\ |\ "block"\ |\ "reject".

\ \ \ \ device_id\ ::=\ "*:*"\ |\ vendor_id\ ":*"\ |\ vendor_id\ ":"\ product_id.

\ \ \ \ device_attributes\ ::=\ device_attributes\ |\ attribute.
\ \ \ \ device_attributes\ ::=\ .

\ \ \ \ conditions\ ::=\ conditions\ |\ condition.
\ \ \ \ conditions\ ::=\ .
\f[]
.fi
.PP
See the \f[I]Device Attributes\f[] section for the list of available
attributes and \f[I]Conditions\f[] for the list of supported rule
conditions.
.SS Targets
.PP
The target of a rule specifies whether the device will be authorized for
use or not.
Three types of target are recognized:
.IP \[bu] 2
\f[I]allow\f[] \-\- \f[B]authorize\f[] the device
.IP \[bu] 2
\f[I]block\f[] \-\- \f[B]deauthorize\f[] the device
.IP \[bu] 2
\f[I]reject\f[] \-\- \f[B]remove\f[] the device from the system
.SS Device Specification
.PP
Except the target, all the other fields of a rule need not be specified.
Such a minimal rule will match any device and allows the policy creator
to write an explicit default target (there\[aq]s an implicit one too,
more on that later).
However, if one want\[aq]s to narrow the applicability of a rule to a
set of devices or one device only, it\[aq]s possible to do so with a
device id and/or device attributes.
.SS Device ID
.PP
A USB device ID is the colon delimited pair
\f[B]vendor_id:product_id\f[].
All USB devices have this ID assigned by the manufacturer and it should
uniquely identify a USB product.
Both \f[B]vendor_id\f[] and \f[B]product_id\f[] are 16\-bit numbers
represented in hexadecimal base.
.PP
In the rule, it\[aq]s possible to use an asterisk character to match
either any device ID \f[C]*:*\f[] or any product ID from a specific
vendor, e.g.
\f[C]1234:*\f[].
.SS Device Attributes
.PP
Device attributes are specific value read from the USB device after
it\[aq]s inserted to the system.
Which attributes are available is defined bellow.
Some of the attributes are derived or based on attributes read directly
from the device.
The value of an attribute is represented as a double\-quoted string.
.PP
List of attributes:
.TP
.B \f[B]hash\f[] \f[C]"[0\-9a\-f]{32}"\f[]
Match a hash of the device attributes (the hash is computed for every
device by USBGuard).
.RS
.RE
.TP
.B \f[B]name\f[] \f[C]"device\-name"\f[]
Match the USB device name attribute.
.RS
.RE
.TP
.B \f[B]serial\f[] \f[C]"serial\-number"\f[]
Match the iSerial USB device attribute.
.RS
.RE
.TP
.B \f[B]via\-port\f[] \f[C]"port\-id"\f[]
Match the USB port through which the device is connected.
.RS
.RE
.TP
.B \f[B]via\-port\f[] \f[C][operator]\ {\ "port\-id"\ "port\-id"\ ...\ }\f[]
Match a set of USB ports.
.RS
.RE
.TP
.B \f[B]with\-interface\f[] \f[C]interface\-type\f[]
Match an interface the USB device provides.
.RS
.RE
.TP
.B \f[B]with\-interface\f[] \f[C][operator]\ {\ interface\-type\ interface\-type\ ...\ }\f[]
Match a set of interface types against the set of interfaces that the
USB device provides.
.RS
.RE
.PP
where \f[I]operator\f[] is one of:
.IP \[bu] 2
\f[I]all\-of\f[] \-\- The device attribute set must contain all of the
specified values for the rule to match.
.IP \[bu] 2
\f[I]one\-of\f[] \-\- The device attribute set must contain at least one
of the specified values for the rule to match.
.IP \[bu] 2
\f[I]none\-of\f[] \-\- The device attribute set must not contain any of
the specified values for the rule to match.
.IP \[bu] 2
\f[I]equals\f[] \-\- The device attribute set must contain exactly the
same set of values for the rule to match.
.IP \[bu] 2
\f[I]equals\-ordered\f[] \-\- The device attribute set must contain
exactly the same set of values in the same order for the rule to match.
.PP
and \f[I]port\-id\f[] is a platform specific USB port identification.
On Linux it\[aq]s in the form "b\-n" where \f[I]b\f[] and \f[I]n\f[] are
unsigned integers (e.g.
"1\-2", "2\-4", ...).
.PP
The \f[I]interface\-type\f[] represents a USB interface and should be
formated as three 8\-bit numbers in hexadecimal base delimited by a
colon character, i.e.
\f[I]cc:ss:pp\f[].
The numbers represent the interface class (\f[I]cc\f[]), subclass
(\f[I]ss\f[]) and protocol (\f[I]pp\f[]) as assigned by the
USB\-IF (http://www.usb.org/about).
See the list of assigned classes, subclasses and
protocols (http://www.usb.org/developers/defined_class).
Instead of the subclass and protocol number, you may write an asterisk
character (\f[C]*\f[]) to match all subclasses or protocols.
Matching a specific class and a specific protocol is not allowed, i.e.
if you use an asterisk as the subclass number, you have to use an
asterisk for the protocol too.
.SS Conditions
.PP
Whether a rule that matches a device will be applied or not can be
further restricted using rule conditions.
If the condition expression is met at the rule evaluation time, then the
rule target is applied for the device.
A condition expression is met if it evaluates to true.
Otherwise, the rule evaluation continues with the next rule.
A rule conditions has the following syntax:
.IP
.nf
\f[C]
\ \ \ \ \ if\ [!]condition
\ \ \ \ \ if\ [operator]\ {\ [!]conditionA\ [!]conditionB\ ...\ }
\f[]
.fi
.PP
Optionally, an exclamation mark (\f[C]!\f[]) can be used to negate the
result of a condition.
.PP
Interpretation of the set operator:
.IP \[bu] 2
\f[I]all\-of\f[] \-\- Evaluate to true if all of the specified
conditions evaluated to true.
.IP \[bu] 2
\f[I]one\-of\f[] \-\- Evaluate to true if one of the specified
conditions evaluated to true.
.IP \[bu] 2
\f[I]none\-of\f[] \-\- Evaluate to true if none of the specified
conditions evaluated to true.
.IP \[bu] 2
\f[I]equals\f[] \-\- Same as \f[I]all\-of\f[].
.IP \[bu] 2
\f[I]equals\-ordered\f[] \-\- Same as \f[I]all\-of\f[].
.PP
List of conditions:
.TP
.B \f[B]localtime\f[]\f[C](time_range)\f[]
Evaluates to true if the local time is in the specified time range.
\f[I]time_range\f[] can be written either as \f[I]HH:MM[:SS]\f[] or
\f[I]HH:MM[:SS]\-HH:MM[:SS]\f[].
.RS
.RE
.TP
.B \f[B]allowed\-matches\f[]\f[C](query)\f[]
Evaluates to true if an allowed device matches the specified query.
The query uses the rule syntax.
\f[B]Conditions in the query are not evaluated\f[].
.RS
.RE
.TP
.B \f[B]rule\-applied\f[]
Evaluates to true if the rule currently being evaluated ever matched a
device.
.RS
.RE
.TP
.B \f[B]rule\-applied\f[]\f[C](past_duration)\f[]
Evaluates to true if the rule currently being evaluated matched a device
in the past duration of time specified by the parameter.
\f[I]past_duration\f[] can be written as \f[I]HH:MM:SS\f[],
\f[I]HH:MM\f[], or \f[I]SS\f[].
.RS
.RE
.TP
.B \f[B]rule\-evaluated\f[]
Evaluates to true if the rule currently being evaluated was ever
evaluated before.
.RS
.RE
.TP
.B \f[B]rule\-evaluated\f[]\f[C](past_duration)\f[]
Evaluates to true if the rule currently being evaluated was evaluated in
the pas duration of time specified by the parameter.
\f[I]past_duration\f[] can be written as \f[I]HH:MM:SS\f[],
\f[I]HH:MM\f[], or \f[I]SS\f[].
.RS
.RE
.TP
.B \f[B]random\f[]
Evaluates to true/false with a probability of \f[I]p=0.5\f[].
.RS
.RE
.TP
.B \f[B]random\f[]\f[C](p_true)\f[]
Evaluates to true with the specified probability \f[I]p_true\f[].
.RS
.RE
.TP
.B \f[B]true\f[]
Evaluates always to true.
.RS
.RE
.TP
.B \f[B]false\f[]
Evaluates always to false.
.RS
.RE
.SS Initial policy
.PP
Using the \f[B]usbguard\f[] CLI tool and its \f[B]generate\-policy\f[]
subcommand, you can generate an initial policy for your system instead
of writing one from scratch.
The tool generates an \f[B]allow\f[] policy for all devices connected to
the system at the moment of execution.
It has several options to tweak the resulting policy, see
\f[B]usbguard\f[](1) for further details.
.PP
The policy will be printed out on the standard output.
It\[aq]s a good idea to review the generated rules before using them on
a system.
The typical workflow for generating an initial policy could look like
this:
.IP
.nf
\f[C]
\ \ \ \ #\ usbguard\ generate\-policy\ >\ rules.conf
\ \ \ \ #\ vi\ rules.conf
\ \ \ \ (review/modify\ the\ rule\ set)
\ \ \ \ #\ sudo\ install\ \-m\ 0600\ \-o\ root\ \-g\ root\ rules.conf\ /etc/usbguard/rules.conf
\ \ \ \ #\ sudo\ systemctl\ restart\ usbguard
\f[]
.fi
.SS Example Policies
.PP
The following examples show what to put into the \f[B]rules.conf\f[]
file in order to implement the given policy.
.PP
\f[B]1) Allow USB mass storage devices (USB flash disks) and block
everything else\f[]
.PP
This policy will block any device that isn\[aq]t just a mass storage
device.
Devices with a hidden keyboard interface in a USB flash disk will be
blocked.
Only devices with a single mass storage interface will be allowed to
interact with the operating system.
The policy consists of a single rule:
.IP
.nf
\f[C]
\ \ \ \ allow\ with\-interface\ equals\ {\ 08:*:*\ }
\f[]
.fi
.PP
The blocking is implicit in this case because we didn\[aq]t write a
\f[C]block\f[] rule.
Implicit blocking is useful to desktop users because a desktop applet
listening to USBGuard events can ask the user for a decision if an
implicit target was selected for a device.
.PP
\f[B]2) Allow a specific Yubikey device to be connected via a specific
port. Reject everything else on that port\f[]
.IP
.nf
\f[C]
\ \ \ \ allow\ 1050:0011\ name\ "Yubico\ Yubikey\ II"\ serial\ "0001234567"\ via\-port\ "1\-2"\ hash\ "044b5e168d40ee0245478416caf3d998"
\ \ \ \ reject\ via\-port\ "1\-2"
\f[]
.fi
.PP
We could use just the hash to match the device.
However, using the name and serial attributes allows the policy creator
to quickly assign rules to specific devices without computing the hash.
On the other hand, the hash is the most specific value we can use to
identify a device in USBGuard so it\[aq]s the best attribute to use if
you want a rule to match just one device.
.PP
\f[B]3) Reject devices with suspicious combination of interfaces\f[]
.PP
A USB flash disk which implements a keyboard or a network interface is
very suspicious.
The following set of rules forms a policy which allows USB flash disks
and explicitly rejects devices with an additional and suspicious (as
defined before) interface.
.IP
.nf
\f[C]
\ \ \ \ allow\ with\-interface\ equals\ {\ 08:*:*\ }
\ \ \ \ reject\ with\-interface\ all\-of\ {\ 08:*:*\ 03:00:*\ }
\ \ \ \ reject\ with\-interface\ all\-of\ {\ 08:*:*\ 03:01:*\ }
\ \ \ \ reject\ with\-interface\ all\-of\ {\ 08:*:*\ e0:*:*\ }
\ \ \ \ reject\ with\-interface\ all\-of\ {\ 08:*:*\ 02:*:*\ }
\f[]
.fi
.PP
The policy rejects all USB flash disk devices with an interface from the
HID/Keyboard, Communications and Wireless classes.
Please note that blacklisting is the wrong approach and you
shouldn\[aq]t just blacklist a set of devices and allow the rest.
The policy above assumes that blocking is the implicit default.
Rejecting a set of devices considered as "bad" is a good approach how to
limit the exposure of the OS to such devices as much as possible.
.PP
\f[B]4) Allow a keyboard\-only USB device only if there isn\[aq]t
already a USB device with a keyboard interface allowed\f[]
.IP
.nf
\f[C]
\ \ \ \ allow\ with\-interface\ one\-of\ {\ 03:00:01\ 03:01:01\ }\ if\ !allowed\-matches(with\-interface\ one\-of\ {\ 03:00:01\ 03:01:01\ })
\f[]
.fi
.PP
\f[B]5) Play "Russian roulette" with USB devices\f[]
.IP
.nf
\f[C]
\ \ \ \ allow\ if\ random(0.1666)
\ \ \ \ reject
\f[]
.fi
.SH BUGS
.PP
If you find a bug in this software or if you\[aq]d like to request a
feature to be implemented, please file a ticket at
<https://github.com/dkopecek/usbguard/issues/new>.
.SH COPYRIGHT
.PP
Copyright © 2015 Red Hat, Inc.
License GPLv2+: GNU GPL version 2 or later
<http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH SEE ALSO
.PP
\f[B]usbguard\-daemon\f[](8), \f[B]usbguard\-daemon.conf\f[](5)
.SH AUTHORS
Daniel Kopeček <dkopecek@redhat.com>.
